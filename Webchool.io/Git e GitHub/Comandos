--Comandos

#A01 - Git WorkFlow

	| Tags |0.1||0.2| |1.0|				--Nome das versões
			 |    |     | 
	|Master| O--->O---->O 				--Principal, usuario final.
	|Hotfix|  \`0´		|				--Correções dos erros e falhas.
	|Release|  \ \		0				--Lançamento de Versões finais do produto com grande mudanças, fim de um ciclo de desenvolvimento.
	|Develop|   O-0-->O´--->O 			--Desenvolvimento versões não enstaveis.
	|Feature|	 `0-0´		 `0--->0 	--Versões de desenvolvimento de funções do sistema.

#A02 - HELP, INIT, ADD, STATUS, LOG, REMOTE, PUSH, CHECKOUT, DIFF.

	01)git help <command>. 
		-documentação dos comandos do git.

	02)git init.
		-cria um repositorio git.

	03)git add <arquivo> 
		-Adicionar arquivos a Stage Area.
		-Adicionar arquivos a area de montagem dos commits
		-01)git add <.>
			-Adiciona todos aquivos e diretorios.

	04)git commit [-m "mensagem"]
		-01)git config --global core.editor gedit <configurar editor de mensagem do commit>.   

	05)git status
		-estado do repositorio.

	06)git log
		-historico do commit.
		-01)git log --decorate
			-estiliza o log para ficar melhor a visibilidade.
		-02)git log --oneline
			-exibe o log em apenas uma linha.

	07)git remote add origin git@gitghub.com:endereco.
		-01)git remote -v
			-mostrar os as configurações dos repositorios remotos

	08)git push origin"destino" master"branch" / <remote> <branch>
		-enviar commits para o repositorio remoto.
		-01)git push -u origin master
			-A primeira vez.

	09)git checkout --<arquivo> 
		-remover arquivo para ultima alteração.

	10)git diff [path]
		-diferença entre comits, branchs e (arquivos ?)
		-01)git diff HEAD~1

#A03 - CLONE, PULL, CHECKOUT, REVERT, RESET.

	11)git clone <URL>
		-Baixar o repositorio remoto
		-Outra forma de criar um repositorio local.
		-Ja vem com o remote configurado.

	12)git pull
		-Baixa as alterações do repositorio remoto.
		-Mantem o repositorio sincronizado com os ultimos commits de uma branch.

	13)git checkout 
		-(01)Navegar no historico:
			-01)git checkout <commit> <file>
				-Permite ver como um arquivo ou todo o repositorio estava em um determinado commit.		
				-Altera o repositorio para o estado daquele commit.
				-É util para fazer teste antes e depois de alterações.
			-02)git checkout master = <branch>
				-Para voltar o repositorio no ultimo commit
		-(02)Desfazendo alterações:
			-01)git checkout -- <path_or_file>
				-Irá desfazer todas as alterações que não estejam no Stage desde o ultimo commit.
			-02)git checkout HEAD -- <path_file>
				-Desfazer as alterações desde o ultimo commit incluindo o Stage.

	14)git revert <commit>
		-Irá criar um novo commit que desfaz as alterações do commit especificado.
		-Util par desfazer um commit antigo.
		-Faz um commit ao contrario, desfaz o commit mas volta.

	15)git reset <commit>
		-Reseta o repositorio para um determinado commit.
		-01)git reset --hard <commit>
			-resetar e remover todas as alterações.
			-CUIDADO AO USAR! NÃO USAR SE JÁ ESTIVER PUBLICADO.
			-Util para desfazer ultimos commmits.
		-02)git reset HEAD~<n commits atras>

#A04 - BRACHING, MERGE, REBASE, FETCH, TAG.

	BRANCH: 
		-É uma lista de commits.
		-Representa ramificações no repositório.
		-Muito útil para trabalhos colaborativos.
		-Branchs de desenvolvimento facilitam o controle.
		-Branch master é a padrão.

	16)git branch
		-Ver todas as branchs do repositorio.
		-01)git branch <nova_branch>
			-Criar uma nova branch.
		-02)git branch -d <branch>
			-Exclui uma branch.
		-03)git checkout <branch>
			-Muda para a e de branch.
			-Seu repositorio passa a ter os commits que a branch possui e novos commits serão adicionados a ela.
		-04)git push --set-upstream <origin> <nova_branch>
			-setar no repositorio remoto uma nova branch com seus commits.
			-01)git push -u <origin> <nova_branch>
				-Abreviação do comando anterio.

	MERGE:
		-Apliar os commits de uma branch na branch atual.
		-Encrontra um commit comum(base) entre as branchs e aplica todos os commits que a branch atual não possui.
		-Caso existam commits na branch atual que não estão na outra, será criado um commit de merge.
		
	17)git merge <branch>
		-CUIDADO SOMENTE USAR SE TEM MUITOS CONFLITOS.
		-USAR COM MUITAS MODIFICAÇÕES.

	REBASE:
		-Semelhante ao Merge porem é diferente na ordem de aplicar os commits.
		-No Rebase, os seus commits na frente da base são removidos temporiariamente, os commits de outra branch são aplicados na sua branch e por fim seus commits são aplicados um a um.
		-Pode acontecer conflitos que serão resolvidos para cada commit.

	18)git rebase <branch>
		-USAR COM POUCAS MODIFICAÇÃO E ADICIONADO NOVOS ARQUIVOS AO REPOSITORIO.
		-Exemplo Merge:
			0---0-----0---O---O---°0
				 `O---O-----------´
		-Exemplo Rebase:
			0---0-|---|-0 	= 	0---0---O---O---°0
				 `O---O

	19)git fetch
		-Baixa as atualizações do remote porém não aplica elas no repositório.
		-Permite fazer o rebase de uma branch em vez de fazer o merge.
		-Pull = Fetch + Merge.
		-Fetch + Rebase é melhor para manter histórico do desenvolvimento.

	20)git tag [nome da tag]
		-Útil para definir versões estáveis do projeto.
		-Semelhante a Branch porém não recebe mais commits.
		-Guarda um estado do repositório.
		-01)git push <remote> <tag>
			-Enviar a tag para o repositorio remoto.

#A05 - Interfaces Gráficas e GitHub.
	
	Interfaces Gráficas GUI
		-Pelo terminal se faz tudo.
		-Interfaces gráficas ajudam na visualização e auxiliam em algumas tarefas.

		Recomendadas:
			-Egit = Plugin para Eclipse.
			-GitEye = Linux, Windows e Mac.

		Não Recomendado: 
			-GitHub for Windows.

	GitHub

		Fork:
			-Copia um repositório de outro usuário para seu usuáriono GitHub.
			-É assim que começa a contribuição para outros projetos.
			-Você teria uma cópia idependente do repositório original, podendo fazer quaisquer alterações.

		Issues:
			-Tradução: Questões.
			-Reportar bugs.
			-Organizar tarefas a serem feitas.
			-Permite discussão entre os usuários.
			-Pode ser referenciado por commits.
				-Commit: "Closes #3"

		Pull Request:
			-O grande simbolo de colaboração.
			-É quando você solicita qe sua alterações sejam unidas a uma branch no mesmo repositório ou a um repositorio que sofreu o fork.
			-Igual uma Issue porém com uma branch associada.
			-Muito útil para o trabalho colaborativo.

		Fluxo do GitHub:
			-https://guides.github.com/introduction/flow/

		Checkout em Pull Request:
			-git fetch origin pull/<ID>/head:<BRANCH>
			-Cria uma branch com os commits do pull request.

#A06 - .gitignore, git commit --amend, git stash.

	.gitignore:
		-Configurar arquivos que devem ser ignorados.
		-Contém arquivos, caminhos e patterns.

		-Ex. Diretorio:
			node_modules/
		-Ex. Arquivo:
			Index.html
		-Ex. Seletor todos os arquivos:
			**/*.css
	
	21)git commit --amend
		-Altera o último commit.
		-Mensagem de commit.
		-Adiciona arquivos.

	22)git stash
		-Guarda as alterações do Working Directory.
		-Permite fazer rebase, merge trocar de branch sem a necessidade de fazer um commit.

		-01)git stash list
			-lista todos as modificações colocadas na pilha do stash.
		-02)git stash pop
			-Aplica o ultimo stash armazenado no Working directory.

	23)git cherry-pick <commit>
		-Aplica as alterações de um commit na branch atual.
		-Cria um novo commit.
		-Replicar commit.
		-Útil para recuperar histórico

	24)git blame
		-Mostra as alterações feitas em um arquivo por linha.
		-Mostra o autor e o commit que foi feito aquela linha.
		-Útil para verificar quando as alterações foram feitas, por que e por quem.

	25)git bisect
		-Permite fazer uma busca binária nos commits para encontrar uma alteração.
		-Útil para alterações que modificaram o comportamento e não podem ser identificadas por código facilmente.
		-Quando a alteração pode ser bastante antiga.

		-01)git bisect start
			-iniciar a busca.

		-02)git bisect bad <commit> <last>
			-Informar o commit com erro.

		-03)git bisect good <commit>
			-Informar o commit certo.

	GitHub Pages
		-Hospedagem de website estático.
		-Site para usuários, organizações e repositórios.
		-Branch    especial 'gh-pages'.
		-Deve conter um index.html.
		-gerador de páginas do GitHub.

	GitHub Milestones
		-Grupo de Issues associado a um objetivo.
		-Possui uma data.
		-Permite acompanhar a % de issues resolvidas.
		-Existe em outros servidores Git.

	Hooks e Serviços
		-Permite integrar eventos do repositório com outras aplicações.
		-Possui alguns serviços já compatíveis.
		-Exemplo: travis-CI, Slack.

	GIT KRAKEN
	
	GIT GAME
		-Série de desafios para resolver com git.
