Comandos:

01)git help <command>. 
	-documentação dos comandos do git.

02)git init.
	-cria um repositorio git.

03)git add <arquivo> 
	-Adicionar arquivos a Stage Area.
	-Adicionar arquivos a area de montagem dos commits
	-01)git add <.>
		-Adiciona todos aquivos e diretorios.

04)git commit [-m "mensagem"]
	-01)git config --global core.editor gedit <configurar editor de mensagem do commit>   

05)git status
	-estado do repositorio.

06)git log
	-historico do commit.

07)git remote add origin git@gitghub.com:endereco.
	-01)git remote -v
		-mostrar os as configurações dos repositorios remotos

08)git push origin"destino" master"branch" / <remote> <branch>
	-enviar commits para o repositorio remoto.

09)git checkout --<arquivo> 
	-remover arquivo para ultima alteração.

10)git diff [path]
	-diferença entre comits, branchs e (arquivos ?)
	-01)git diff HEAD~1

<-----#A03 - HISTORICO, ALTERAÇÕES E CONFLITOS----->

11)git clone <URL>
	-Baixar o repositorio remoto
	-outra forma de criar um repositorio local.
	-ja vem com o remote configurado.

12)git pull
	-baixa as alterações do repositorio remoto.
	-mantem o repositorio sincronizado com os ultimos commits de uma branch.

13)git checkout 
	-(01)Navegar no historico:
		-01)git checkout <commit> <file>
			-Permite ver como um arquivo ou todo o repositorio estava em um determinado commit.		
			-Altera o repositorio para o estado daquele commit.
			-é util para fazer teste antes e depois de alterações.
		-02)git checkout master = <branch>
			-para voltar o repositorio no ultimo commit
	-(02)Desfazendo alterações:
		-01)git checkout -- <path_or_file>
			-Irá desfazer todas as alterações que não estejam no Stage desde o ultimo commit.
		-02)git checkout HEAD -- <path_file>
			-Desfazer as alterações desde o ultimo commit incluindo o Stage.

14)git revert <commit>
	-irá criar um novo commit que desfaz as alterações do commit especificado.
	-Util par desfazer um commit antigo.
	-faz um commit ao contrario, desfaz o commit mas volta.

15)git reset <commit>
	-Reseta o repositorio para um determinado commit.
	-01)git reset --hard <commit>
		-resetar e remover todas as alterações.
		-CUIDADO AO USAR! NÃO USAR SE JÁ ESTIVER PUBLICADO.
		-Util para desfazer ultimos commmits.
	-02)git reset HEAD~<n commits atras>

>-----CONFLITOS-----<

<-----#A04 - BRACHING, MERGE----->

BRANCH: 
	-É uma lista de commits.
	-Representa ramificações no repositório.
	-Muito útil para trabalhos colaborativos.
	-Branchs de desenvolvimento facilitam o controle.
	-Branch master é a padrão.

16)git branch
	-Ver todas as branchs do repositorio.
	-01)git branch <nova_branch>
		-Criar uma nova branch.
	-02)git branch -d <branch>
		-Exclui uma branch.
	-03)git checkout <branch>
		-Muda para a e de branch.
		-Seu repositorio passa a ter os commits que a branch possui e novos commits serão adicionados a ela.
	-04)git push --set-upstream <origin> <nova_branch>
		-setar no repositorio remoto uma nova branch com seus commits.
		-01)git push -u <origin> <nova_branch>
			-Abreviação do comando anterio.



		Fim Branch
MERGE:
	-Apliar os commits de uma branch na branch atual.
	-Encrontra um commit comum(base) entre as branchs e aplica todos os commits que a branch atual não possui.
	-Caso existam commits na branch atual que não estão na outra, será criado um commit de merge.
	
17)git merge <branch>
