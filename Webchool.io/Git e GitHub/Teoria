--Teoria

#A01
	
	O que é Git-SCM
		-Sistema de controle de versão distribuido.
		-SCM -> Source Control Management.
		-Criado por Linus Torvalds(2005).
		-Auxiliar no Desenvolvimento do Linux.


	Gerencia de Configuração de Software
		-Identificação
		-Documentação
		-Controle
		-Auditoria

		-queremos saber
		-oque mudou e quando?
		-porque mudou
		-quem fez a mudança?
		-podemos reproduzir a mudança



	Artefatos
		-Codigo fonte
		-Documentação
		-Manual de usuario

	Ferramentas de Controle de Versão
		-Subversion (SVN).
		-Mercurial.
		-CVS -Concurrent Versioning System.
		-Bazaar.
		-Git é o mais rápido e eficiente.

	O que é GitHub
		-Servidor de repositórios Git.
		-Surgiu em 2008.
		-+10 milhões de repositórios.
		-+10 milhões de usuários.

#A02

	Git Init 
		-Será criado o diretório configurado como um repositorio Git.
		-Todas as configurações do repositório ficam na pasta .git.

	Git Push
		-Envia alterações (commits) de uma branch para o repositório remoto.
		-O envio é rejeitado se o repositório local não estiver sincronizado.

	Git Add
		-Adiciona os arquivos novos e modificados para o próximo commit.

	Git Commit
		-Registra o commit com todos os arquivos que usou "git add".
		-Se o parâmetro de mensagem não for passado abrirá um editor de texto para escrever a mensagem.

	Git Workflow
		-Basicamente a maior parte do trabalho com git consiste nestas tarefas:
			-01)Editar.
			-02)Commitar.
			-03)Sincronizar com o repositório remoto.

	Estados dos arquivos
		-Não monitorado (untracked).
		-Modificado (modified).
		-Preparado (staged).
		-Consolidado (commited).

		
<-----BRACHING----->
Criando ramificações do repositorio.

Oque são?
Ramificações do repositorio

BRANCH:
	-É uma lista de commits.
	-Representa ramificações no repositório.
	-Muito útil para trabalhos colaborativos.
	-Branchs de desenvolvimento facilitam o controle.
	-Branch master é a padrão.

<-----MERGE - REABASE----->

MERGE:
	-Apliar os commits de uma branch na branch atual.
	-Encrontra um commit comum(base) entre as branchs e aplica todos os commits que a branch atual não possui.
	-Caso existam commits na branch atual que não estão na outra, será criado um commit de merge.

REBASE:
	-Semelhante ao Merge porem é diferente na ordem de aplicar os commits.
	-No Rebase, os seus commits na frente da base são removidos temporiariamente, os commits de outra branch são aplicados na sua branch e por fim seus commits são aplicados um a um.
	-Pode acontecer conflitos que serão resolvidos para cada commit.

	-Exemplo Merge:
		0---0-----0---O---O---°0
			 `O---O-----------´
	-Exemplo Rebase:
		0---0-|---|-0 	= 	0---0---O---O---°0
			 `O---O

TAG:
	-Porque usar branch a tag?
		para commitar na branch com o hotfix.

